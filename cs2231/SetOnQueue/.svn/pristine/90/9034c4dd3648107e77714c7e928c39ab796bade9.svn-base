import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

import org.junit.Test;

import components.set.Set;

/**
 * JUnit test fixture for {@code Set<String>}'s constructor and kernel methods.
 *
 * @author Put your name here
 *
 */
public abstract class SetTest {

    /**
     * Invokes the appropriate {@code Set} constructor and returns the result.
     *
     * @return the new set
     * @ensures constructorTest = {}
     */
    protected abstract Set<String> constructorTest();

    /**
     * Invokes the appropriate {@code Set} constructor and returns the result.
     *
     * @return the new set
     * @ensures constructorRef = {}
     */
    protected abstract Set<String> constructorRef();

    /**
     * Creates and returns a {@code Set<String>} of the implementation under
     * test type with the given entries.
     *
     * @param args
     *            the entries for the set
     * @return the constructed set
     * @requires [every entry in args is unique]
     * @ensures createFromArgsTest = [entries in args]
     */
    private Set<String> createFromArgsTest(String... args) {
        Set<String> set = this.constructorTest();
        for (String s : args) {
            assert !set.contains(
                    s) : "Violation of: every entry in args is unique";
            set.add(s);
        }
        return set;
    }

    /**
     * Creates and returns a {@code Set<String>} of the reference implementation
     * type with the given entries.
     *
     * @param args
     *            the entries for the set
     * @return the constructed set
     * @requires [every entry in args is unique]
     * @ensures createFromArgsRef = [entries in args]
     */
    private Set<String> createFromArgsRef(String... args) {
        Set<String> set = this.constructorRef();
        for (String s : args) {
            assert !set.contains(
                    s) : "Violation of: every entry in args is unique";
            set.add(s);
        }
        return set;
    }

    // TODO - add test cases for constructor, add, remove, removeAny, contains, and size
    @Test
    public final void testNoArgumentConstructor() {
        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef();

        assertEquals(s, sExpected);
    }

    @Test
    public final void testEmptySize() {
        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef();

        assertEquals(s.size(), sExpected.size());
    }

    @Test
    public final void testNonEmptySize() {
        Set<String> s = this.createFromArgsTest("1", "2", "3");
        Set<String> sExpected = this.createFromArgsRef("1", "2", "3");

        assertEquals(s.size(), sExpected.size());
    }

    @Test
    public final void testAddSetToEmpty() {
        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef("1", "2", "3");
        Set<String> toAdd = this.createFromArgsRef("1", "2", "3");

        s.add(toAdd);

        assertEquals(s, sExpected);
    }

    @Test
    public final void testAddSingleToEmpty() {
        Set<String> s = this.createFromArgsTest();
        Set<String> sExpected = this.createFromArgsRef("1");

        s.add("1");

        assertEquals(s, sExpected);
    }

    @Test
    public final void testAddSet() {
        Set<String> s = this.createFromArgsTest("1");
        Set<String> sExpected = this.createFromArgsRef("1", "2", "3");
        Set<String> toAdd = this.createFromArgsRef("2", "3");

        s.add(toAdd);

        assertEquals(s, sExpected);
    }

    @Test
    public final void testRemoveSingleFromExisting() {
        Set<String> s = this.createFromArgsTest("1", "2", "3");
        Set<String> sExpected = this.createFromArgsRef("1", "2");

        s.remove("3");

        assertEquals(s, sExpected);

    }

    @Test
    public final void testRemoveAny() {
        Set<String> s = this.createFromArgsTest("1", "2", "3");
        int length = s.size();
        s.removeAny();

        assertEquals(s.size(), length - 1);
    }

    @Test
    public final void testContainsTrue() {
        Set<String> s = this.createFromArgsTest("1", "2", "3");
        boolean sExpected = s.contains("2");

        assertEquals(true, sExpected);
    }

    @Test
    public final void testContainsFalse() {
        Set<String> s = this.createFromArgsTest("1", "2", "3");
        boolean sExpected = s.contains("4");

        assertFalse(sExpected);
    }

    @Test
    public final void testContainsEmpty() {
        Set<String> s = this.createFromArgsTest();
        boolean sExpected = s.contains("1");

        assertFalse(sExpected);
    }

}
